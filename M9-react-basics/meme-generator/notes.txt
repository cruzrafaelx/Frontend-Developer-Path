1. Event Listener in React

Syntax: 

<button onClick={handleClick}>Click me</button>

export default function App() {
    function handleClick() {
        console.log("I was clicked!")
    }
    
     return (
        <div className="container">
            <img src="https://picsum.photos/640/360" />
            <button onClick={handleClick}>Click me</button>
        </div>
    )
}

MouseEvent handler reference:

https://react.dev/reference/react-dom/components/common#mouseevent-handler

2. Mapping over array and rendering to DOM

const thingsArray = ["Thing 1", "Thing 2"]

const thingsElements = thingsArray.map(thing => <p>{thing}</p>)
 
    return (
        <div>
            <button>Add Item</button>
            {thingsElements}
        </div>
    )
}

3.  Props vs State:

Props 
- refers to the properties being passed into a component for it to work correctly.
- A component cannot modify those props (immutable)

State
- refers to values that are managed by the component, similar to variables declared inside a function.
- Any changing values that need to be displayed, state will be used. 

1. How would you describe the concept of "state"?
A state is a value that can be modified and displayed. 

- A way for React to remember saved values from within a component.
This is similar to declaring variables from within a component,
with a few added bonuses (which we'll get to later)


2. When would you want to use props instead of state?
I would use props if the data to be displayed need no changing. 

- Anytime you want to pass data into a component so that
component can determine what will get displayed on the
screen.

3. When would you want to use state instead of props?
I would use state when data change through user input for example.

-Anytime you want a component to maintain some values from
within the component. (And "remember" those values even
when React re-renders the component).


4. What does "immutable" mean? Are props immutable? Is state immutable?
Immutable means the data passed can not be changed. Props are immutable. Stats are mutable. 

4. Hooks: useState()

import React, {useState} from "react" 

useState() has 2 values: [saved value, f()]

use array Destructuring to immediately get the desired values from useState()

  const [isImportant, setIsImportant] = React.useState("Yes")
    
    
    function handleClick() {
        setIsImportant("No")
    }

Example:

export default function App() {
    /**
     * Challenge: Set up state to track our count (initial value is 0)
     */
    
    const [count, setCount] = React.useState(0)
    
    count is called a state value
    setCount is called a state setter
    
        
    function add() {
        setCount(prevCount => prevCount + 1)
    }
 
    
    function subtract() {
        setCount(function(prevCount){
            return prevCount - 1
        })
    }
    
    
    return (
        <div className="counter">
            <button onClick={subtract} className="counter--minus">â€“</button>
            <div className="counter--count">
                <h1>{count}</h1>
            </div>
            <button onClick={add} className="counter--plus">+</button>
        </div>
    )
}

1. You have 2 options for what you can pass in to a
   state setter function (e.g. `setCount`). What are they?
   
a. New value of state (setCount(42))
b. Callback function - whatever the callback function 
   returns === new value of state


2. When would you want to pass the first option (from answer
   above) to the state setter function?
Whenever you don't need the previous value of state to determine
what the new value of state should be.


3. When would you want to pass the second option (from answer
   above) to the state setter function?
Whenever you DO need the previous value to determine the new value

5. Ternary Operator

You can also use ternary operator to specify values of JSX

<div className="state">
            <h1 className="state--title">Do I feel like going out tonight?</h1>
            <div className="state--value">
                <h1>{isGoingOut ? "Yes" : "No"}</h1>
            </div>
        </div>



 const [thingsArray, setThingsArray] = React.useState(["Thing 1", "Thing 2"])
    
    function addItem() {
        
        setThingsArray(prevArray => prevArray.push(`Thing ${thingsArray.length + 1}`))
        
        // We'll work on this next
        // const newThingText = `Thing ${thingsArray.length + 1}`
        // thingsArray.push(newThingText)
        // document.getElementById()
        // console.log(thingsArray)
    }

6. Array spread operator!!!!!????

You can use the array spread operator instead of using .push() if youre trying to pass a new value to the previous array.

const [thingsArray, setThingsArray] = React.useState(["Thing 1", "Thing 2"])
    
    function addItem() {
        // We'll work on this next
        setThingsArray(prevThingsArray => [...prevThingsArray, `Thing ${prevThingsArray.length}`])
    }

7. Changing elemengs in DOM using ternary conditions

  let starIcon = contact.isFavorite ? "star-filled.png" : "star-empty.png"

  you can use the variable starIcon to provide the end points of the image source

8. Updating state object

To update a certain property, you should use the spread operator to copy everything first and specify the property afterwards that you want to change:

export default function App() {
    const [contact, setContact] = React.useState({
        firstName: "John",
        lastName: "Doe",
        phone: "+1 (719) 555-1212",
        email: "itsmyrealname@example.com",
        isFavorite: false
    })
    
    let starIcon = contact.isFavorite ? "star-filled.png" : "star-empty.png"
    
    function toggleFavorite() {
        setContact(prevContact => {
            return {
                ...prevContact,
                isFavorite: !prevContact.isFavorite
            }
        })
    }

9. Passing state as props

- It is possible to pass the current state value as a prop to a child component. 

10. Setting state from child component

- You can do this by passing a state setter function as a prop. 

11. Accesibility issues

- If you have images with event listeners, wrap it around a button element so users who use keyboard can also access the event listener with tab focus. 

- if you dont have legible texts  inside a button use an "aria-label" to describe the action to be done by the button. Otherwise you can also use "aria-pressed" to indicate if a button is pressed or not. Use boolean here. 

12. Using dynamic styles in jsx 

 const styles = {
        backgroundColor: props.darkMode ? "#222222" : "#cccccc"
    }

     return(
        <div className="box" key={id} style={styles} ></div>
    )

    you can use styles as an object in jsx. 

13. local state / derived state

Using state in each instance of a component which is influenced by an incoming prop.

14. Passing and receiving an argument through a prop
 onClick={()=>props.toggle(props.id)}

 you use a callback function inside the click event that calls the function passed through the prop

 15. Hide and Show elements through Conditional Rendering &&

 {isShown && <p>{props.punchline}</p>}
 
export default function Joke(props) {
    const [isShown, setIsShown] = React.useState(false)
   
    function toggleShown(){
        setIsShown(prevShown => !prevShown)
    }
    return (
        <div>
            {props.setup && <h3>{props.setup}</h3>}
            {isShown && <p>{props.punchline}</p>}
            <button onClick={toggleShown}>Show Punchline</button>
            <hr />
        </div>
    )
}

Conditional rendering quiz:

1. What is "conditional rendering"?
When we want to only sometimes display something on the page
based on a condition of some sort


2. When would you use &&?
When you want to either display something or NOT display it


3. When would you use a ternary?
When you need to decide which thing among 2 options to display


4. What if you need to decide between > 2 options on
   what to display?
Use an `if...else if... else` conditional or a `switch` statement


16. Forms: onChange={function}

The event listener onChange listens to every change that happens in a form. You can access the value typed into a form using event.target.value. 

17. Combining state into an object

export default function Form() {
    const [formData, setFormData] = React.useState(
        {firstName: "", lastName: ""}
    )

    how do you know which input element triggered the onChange event? You can assign a name property to each input element so you will have access to the specific input element who triggered the event: 

     function handleChange(event) {
        setFormData(prevFormData => {
            const{name, value} = event.target
            return {
                ...prevFormData,
                [name]: value
            }
        })
    }

    <input
                type="text"
                placeholder="Last Name"
                onChange={handleChange}
                name="lastName"
            />

    targetting the .name property of event.target will show which input element exactly triggered the event. 

18. Forms: checkboxes

            <input 
                type="checkbox" 
                id="isFriendly" 
                checked={formData.isFriendly}
                onChange={handleChange}
                name="isFriendly"
            />
            <label htmlFor="isFriendly">Are you friendly?</label>
            <br />

            you can also deconstruct the property of event.target => 

            function handleChange(event) {
            const {name, value, type, checked} = event.target
            setFormData(prevFormData => {
            return {
                ...prevFormData,
                [name]: type === "checkbox" ? checked : value
                    }
                })
            }

19. Forms: radio

- you should set the same "name" value of every radio input so you can only choose one of the given options. 


            <fieldset>
                <legend>Current employment status</legend>
                
                <input 
                    type="radio"
                    id="unemployed"
                    name="employment"
                    value="unemployed"
                    onChange={handleChange}
                />
                <label htmlFor="unemployed">Unemployed</label>
                <br />
                
                <input 
                    type="radio"
                    id="part-time"
                    name="employment"
                    value="part-time"
                    onChange={handleChange}
                />
                <label htmlFor="part-time">Part-time</label>
                <br />
                
                <input 
                    type="radio"
                    id="full-time"
                    name="employment"
                    value="full-time"
                    onChange={handleChange}
                />
                <label htmlFor="full-time">Full-time</label>
                <br />
                
            </fieldset>

20. Select & option

            label htmlFor="favColor">What is your favorite color?</label>
            <br />
            <select 
                id="favColor"
                value={formData.favColor}
                onChange={handleChange}
                name="favColor"
            >
                <option value="red">Red</option>
                <option value="orange">Orange</option>
                <option value="yellow">Yellow</option>
                <option value="green">Green</option>
                <option value="blue">Blue</option>
                <option value="indigo">Indigo</option>
                <option value="violet">Violet</option>
            </select>

21. Accessible Labels: useId()

useId - is a react hook for generating unique IDs that can be passed to accessibility attributes. 

const id = React.useId()

If you need to give IDs to multiple related elements, you can call useId to generate a shared prefix for them:

export default function Form() {
  const id = useId();
  return (
    <form>
      <label htmlFor={id + '-firstName'}>First Name:</label>
      <input id={id + '-firstName'} type="text" />
      <hr />
      <label htmlFor={id + '-lastName'}>Last Name:</label>
      <input id={id + '-lastName'} type="text" />
    </form>
  );
}

22. Submitting the form

You can just use the button element to submit the form.
Afterwards you can declare an onSubmit event handler inside the form tag. 

<form onSubmit={handleSubmit}>

handleSubmit is a function. You need to declare this separately that will handle the submit button.

function handleSubmit(e){
    e.preventDefault()
    submitToApi(formData)
}

23. Controlled Components / inputs



1. In a vanilla JS app, at what point in the form submission
   process do you gather all the data from the filled-out form?
   
   Right before the form is submitted.

2. In a React app, when do you gather all the data from
   the filled-out form?

   You gather it everytime you make a change on a form element that calls the onChange event listener. 

3. Which attribute in the form elements (value, name, onChange, etc.)
   should match the property name being held in state for that input?
   
   the name attribute in the form elements should match the state property name. 

4. What's different about saving the data from a checkbox element
   vs. other form elements?

   Compared to other elements, you have a boolean value saved to the state property from the beginning rather than waiting for a string or a number input. 

   A checkbox uses the `checked` property to determine what should
    be saved in state. Other form elements use the `value` property instead.

5. How do you watch for a form submit? How can you trigger
   a form submit?
   
   You can trigger a form submission by creating a button element inside the form element and declaring an event listener called onSubmit inside the form tag

 
24. API calls

- GET the data (fetch)
- Save the date to state

25. useEffect() - effect hook

By using this Hook, you tell React that your component needs to do something after render. 

React.useEffect(() => )

With useEffect you have 2 parameters:
1. A callback function
2. A dependencies array -it is called a dependencies array because useEffect depends on the value of the array whether to rerun the function in it again or not.

 React.useEffect(function() {
        console.log("Effect ran")
        // fetch("https://swapi.dev/api/people/1")
        //     .then(res => res.json())
        //     .then(data => console.log(data))
    }, [count]) 

    If the count state changes every time a trigger happens, the useEffect will rerun its function because the dependencies array compares its current value to the previous one. A differing value means function rerun. 



What is a side effect? 
- Reaching outside react's ecosystem while trying to set its state.

 React.useEffect(function() {
        fetch("https://swapi.dev/api/people/1")
            .then(res => res.json())
            .then(data => setStarWarsData(data))
    })

1. What is a "side effect" in React? What are some examples?

A side effect is an action inside the useEffect hook that reaches outside the ecosystem of react. For example fetching a data from the API. 

- Any code that affects an outside system.
- local storage, API, websockets, two states to keep in sync

2. What is NOT a "side effect" in React? Examples?

Logging something into the console is not a side-effect

- Anything that React is in charge of.
- Maintaining state, keeping the UI in sync with the data, 
  render DOM elements


3. When does React run your useEffect function? When does it NOT run
   the effect function?
   
React runs your useEffect function after rendering the UI into the DOM. Furthermore, it also reruns the useEffect if you declare a dependencies array as its second parameter and the value of it changes from time to time. 

It does not rerun the effect function if the value of the array dependency is hard coded and does not change.

- As soon as the component loads (first render)
- On every re-render of the component (assuming no dependencies array)
- Will NOT run the effect when the values of the dependencies in the
  array stay the same between renders


4. How would you explain what the "dependecies array" is?

The dependencies array is an array to which the effect function depends on as to whether it should rerun its callback function again or not.
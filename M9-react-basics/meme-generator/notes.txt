1. Event Listener in React

Syntax: 

<button onClick={handleClick}>Click me</button>

export default function App() {
    function handleClick() {
        console.log("I was clicked!")
    }
    
     return (
        <div className="container">
            <img src="https://picsum.photos/640/360" />
            <button onClick={handleClick}>Click me</button>
        </div>
    )
}

MouseEvent handler reference:

https://react.dev/reference/react-dom/components/common#mouseevent-handler

2. Mapping over array and rendering to DOM

const thingsArray = ["Thing 1", "Thing 2"]

const thingsElements = thingsArray.map(thing => <p>{thing}</p>)
 
    return (
        <div>
            <button>Add Item</button>
            {thingsElements}
        </div>
    )
}

3.  Props vs State:

Props 
- refers to the properties being passed into a component for it to work correctly.
- A component cannot modify those props (immutable)

State
- refers to values that are managed by the component, similar to variables declared inside a function.
- Any changing values that need to be displayed, state will be used. 

1. How would you describe the concept of "state"?
A state is a value that can be modified and displayed. 

- A way for React to remember saved values from within a component.
This is similar to declaring variables from within a component,
with a few added bonuses (which we'll get to later)


2. When would you want to use props instead of state?
I would use props if the data to be displayed need no changing. 

- Anytime you want to pass data into a component so that
component can determine what will get displayed on the
screen.

3. When would you want to use state instead of props?
I would use state when data change through user input for example.

-Anytime you want a component to maintain some values from
within the component. (And "remember" those values even
when React re-renders the component).


4. What does "immutable" mean? Are props immutable? Is state immutable?
Immutable means the data passed can not be changed. Props are immutable. Stats are mutable. 

4. Hooks: useState()

import React, {useState} from "react" 

useState() has 2 values: [saved value, f()]

use array Destructuring to immediately get the desired values from useState()

  const [isImportant, setIsImportant] = React.useState("Yes")
    
    
    function handleClick() {
        setIsImportant("No")
    }

Example:

export default function App() {
    /**
     * Challenge: Set up state to track our count (initial value is 0)
     */
    
    const [count, setCount] = React.useState(0)
    
    count is called a state value
    setCount is called a state setter
    
        
    function add() {
        setCount(prevCount => prevCount + 1)
    }
 
    
    function subtract() {
        setCount(function(prevCount){
            return prevCount - 1
        })
    }
    
    
    return (
        <div className="counter">
            <button onClick={subtract} className="counter--minus">â€“</button>
            <div className="counter--count">
                <h1>{count}</h1>
            </div>
            <button onClick={add} className="counter--plus">+</button>
        </div>
    )
}

1. You have 2 options for what you can pass in to a
   state setter function (e.g. `setCount`). What are they?
   
a. New value of state (setCount(42))
b. Callback function - whatever the callback function 
   returns === new value of state


2. When would you want to pass the first option (from answer
   above) to the state setter function?
Whenever you don't need the previous value of state to determine
what the new value of state should be.


3. When would you want to pass the second option (from answer
   above) to the state setter function?
Whenever you DO need the previous value to determine the new value

5. Ternary Operator

You can also use ternary operator to specify values of JSX

<div className="state">
            <h1 className="state--title">Do I feel like going out tonight?</h1>
            <div className="state--value">
                <h1>{isGoingOut ? "Yes" : "No"}</h1>
            </div>
        </div>



 const [thingsArray, setThingsArray] = React.useState(["Thing 1", "Thing 2"])
    
    function addItem() {
        
        setThingsArray(prevArray => prevArray.push(`Thing ${thingsArray.length + 1}`))
        
        // We'll work on this next
        // const newThingText = `Thing ${thingsArray.length + 1}`
        // thingsArray.push(newThingText)
        // document.getElementById()
        // console.log(thingsArray)
    }

6. Array spread operator!!!!!????

You can use the array spread operator instead of using .push() if youre trying to pass a new value to the previous array.

const [thingsArray, setThingsArray] = React.useState(["Thing 1", "Thing 2"])
    
    function addItem() {
        // We'll work on this next
        setThingsArray(prevThingsArray => [...prevThingsArray, `Thing ${prevThingsArray.length}`])
    }

7. Changing elemengs in DOM using ternary conditions

  let starIcon = contact.isFavorite ? "star-filled.png" : "star-empty.png"

  you can use the variable starIcon to provide the end points of the image source

8. Updating state object

To update a certain property, you should use the spread operator to copy everything first and specify the property afterwards that you want to change:

export default function App() {
    const [contact, setContact] = React.useState({
        firstName: "John",
        lastName: "Doe",
        phone: "+1 (719) 555-1212",
        email: "itsmyrealname@example.com",
        isFavorite: false
    })
    
    let starIcon = contact.isFavorite ? "star-filled.png" : "star-empty.png"
    
    function toggleFavorite() {
        setContact(prevContact => {
            return {
                ...prevContact,
                isFavorite: !prevContact.isFavorite
            }
        })
    }

9. Passing state as props

- It is possible to pass the current state value as a prop to a child component. 

10. Setting state from child component

- You can do this by passing a state setter function as a prop. 

11. Accesibility issues

- If you have images with event listeners, wrap it around a button element so users who use keyboard can also access the event listener with tab focus. 

- if you dont have legible texts  inside a button use an "aria-label" to describe the action to be done by the button. Otherwise you can also use "aria-pressed" to indicate if a button is pressed or not. Use boolean here. 

12. Using dynamic styles in jsx 

 const styles = {
        backgroundColor: props.darkMode ? "#222222" : "#cccccc"
    }

     return(
        <div className="box" key={id} style={styles} ></div>
    )

    you can use styles as an object in jsx. 

13. local state / derived state

Using state in each instance of a component which is influenced by an incoming prop.